#!/usr/bin/env perl

use utf8;
use strict;
use warnings;
use File::Slurp;
use Try::Tiny;

my @default_db_connect = (
    'dbi:mysql:database=kpw2012',
    'dbusername',
    'dbpassword',
    {
        RaiseError           => 1,
        AutoCommit           => 1,
        mysql_enable_utf8    => 1,
        mysql_auto_reconnect => 1,
        on_connect_do =>
            [ q{SET NAMES 'utf8'}, q{SET CHARACTER SET 'utf8'} ],
    },
);

my @db_connect;
if ( -f 'db.conf' ) {
    @db_connect
        = try { @{ eval read_file('db.conf') } }
        catch { @default_db_connect };
}

+{
    #
    # for Mojolicious hypnotoad server
    #
    hypnotoad => {
        listen  => [ 'http://*:5002' ],
        workers => 6,
    },

    #
    # for DB connect
    #
    connect => \@db_connect,

    #
    # for email
    #
    email => {
        username         => 'kpw2012@perl.kr',
        register_subject => '[KPW2012] Registration Confirmation',
        register_message => <<'END',

%s 님, 등록해주셔서 고맙습니다.

다음 링크로 접속해서 등록 과정을 마무리하시면
"대기자" 명단에 들어가게 됩니다.

<a href="http://event.perl.kr/kpw2012/register/waiting?email=%s&waiting=%s">
http://event.perl.kr/kpw2012/register/waiting?email=%s&waiting=%s
</a>

참가비의 입금 및 확인이 완료되면 "확정" 명단에 들어갑니다.
"확정" 명단에 계신 분들만 입장이 가능하오니 이 점 유의바랍니다.
참가비를 입금할 계좌번호는 다음과 같습니다.

우리은행 461-162011-02-101 김도형

등록 및 환불과 관련한 문의 사항은 언제든지 메일 또는 홈페이지의
연락처를 통해 질문주세요. 행사에 바라는 점은 물론 관련 의견도
언제든지 환영합니다.

고맙습니다. :-)


Seoul Perl Mongers
Keedi Kim

END
    },

    #
    # for site
    #
    secret           => '2012-09-30 21:51:33 Asia/Seoul',
    copyright        => '2012 Seoul.pm',
    project_name     => 'KPW2012',
    project_desc     => 'Korean Perl Workshop 2012',
    google_analytics => 'UA-387065-3',
    meta => {
        author      => 'Keedi Kim',
        keywords    => 'korean, perl, workshop, kpw2012, seoul, mongers, seoul.pm',
        description => 'Korean Perl Workshop 2012',
    },
    header_links => [
        { icon => 'icon-home',     title => 'KPW 2012',     url => '#section-home',     active => 1 },
        { icon => 'icon-edit',     title => 'Register',     url => '#section-register', active => 0 },
        { icon => 'icon-table',    title => 'Schedule',     url => '#section-schedule', active => 0 },
        { icon => 'icon-group',    title => 'Attenders',    url => '#section-attendee', active => 0 },
        { icon => 'icon-envelope', title => 'Contact',      url => '#section-contact',  active => 0 },
    ],
    sponsors => [
        { icon => 'sponsor-google',    title => 'Google Korea', url => 'https://www.google.co.kr/'  },
        { icon => 'sponsor-nemustech', title => 'NemusTech',    url => 'http://www.nemustech.com/'  },
        { icon => 'sponsor-silex',     title => 'SILEX',        url => q{}                          },
        { icon => 'sponsor-jinson',    title => '志&嬋 지앤선', url => 'http://jinson.tistory.com/' },
    ],

    #
    # for schedule
    #
    schedules => [

<<'END',
## 모던한 웹, 무던한 웹, 이상한 웹


[이종진(@JEEN_LEE)][twitter-jeen_lee] -
자칭 0x1c살, 하니아빠, 키보드워리어, 영농후계자, 곶감판매업, 뿌나홀릭, silex 막내.
기술 블로그인 [Jeen's techlog][jeen-home]를 운영하고 있으며,
기술적이며, 현대적인 Perl 관련 글을 꾸준히 올리고 있다.


펄로 웹 개발한다고 하면 고개를 갸우뚱하게 되는 현실세계.
6년동안 월급도둑으로 살아오며 겪어온 다양한 프레임워크와
함께 한 펄로 하는 웹 개발의 이런저런 현재 실태에 대해서 고발합니다.

- <i class="icon-ok"></i> Catalyst, Dancer, Mojolicious, 그 외 더이상 관리되지 않는 여타 프레임워크 사용기
- <i class="icon-ok"></i> CPAN 을 이용한 넝마주이식 웹 개발방법


[twitter-jeen_lee]:         https://twitter.com/JEEN_LEE
[jeen-home]:                http://jeen.github.com/
END

<<'END',
## Perl을 위한 Web App 실행 환경 꾸미기

[김건호(@yuni_kim)][twitter-yuni_kim] -
Yahoo! Inc.의 시스템 오퍼레이터.
GMT -03:00의 YUNI TZ을 가지고 있는 전산 및 조경업계의 이단아.
GSLB와 GIS, Perl을 좋아하며 컴퓨터에게 일을 시키고 구경하는 일을 즐긴다.

하나의 웹앱을 만들고 서비스하기 위해서는 선택해야 하는것들이 무척 많습니다.
소스는 어떻게 관리할 것인가 부터 시작해서, 개발언어, 프레임웍, 라이브러리 등등을 결정해야 하고,
운영단계에서는 아키텍쳐에 따라서 어플리케이션 서버, 웹서버, 캐시서버, 프록시서버 등을 결정해야 합니다.
개발을 어떻게 하느냐에 따라 운영을 어떻게 할 것인가가 바뀌기도 하고,
반대로 운영 방법에 따라 개발 내용이 바뀌기도 합니다.

여러개의 웹앱을 어떻게 효과적으로 운영하느냐에 대해서 고민해봅니다.

- <i class="icon-ok"></i> [nginx][nginx-home]: Front End HTTP Daemon & Proxy
- <i class="icon-ok"></i> [uWSGI][uwsgi-home]: Application server
- <i class="icon-ok"></i> [PSGI][psgi-home], [perlbrew][perlbrew-home]: Perl

[twitter-yuni_kim]:         https://twitter.com/yuni_kim
[nginx-home]:               http://nginx.com/
[perlbrew-home]:            http://perlbrew.pl/
[psgi-home]:                http://plackperl.org/
[uwsgi-home]:               http://projects.unbit.it/uwsgi/
END

<<'END',
## Handler Socket으로 MySQL을 NoSQL처럼 쓰기


[조성재(@jachin24)][twitter-jachin24] -
(주)네무스텍 주임연구원, Lv. 5 월급도둑.
KDE Korean Team Representative, Free Software Worker,
자유소프트웨어, 오픈소스, 상용소프트웨어가 만들어 낸 돌연변이.


최근 하드웨어 비용이 저렴해지면서, 고용량 메모리를 탑재한 서버들이 많아지고 있습니다.
그러한 흐름에 맞춰 고속의 대용량 서비스를 제공할 수 있는 NoSQL 기술이 유행하고 있지만,
전기세나 회선비용이 부담되는 개인에게는 먼나라 이야기로 느껴지기도 합니다.
또한 기존의 MySQL을 사용하고 있는 서비스가 많다면, 함부로 변경할 수도 없는 노릇입니다.
이러한 경우 적절한 기술이 Handler Socket입니다.
C++과 Perl을 기반으로 하는 MySQL Plugin이지만, 현재는 대부분의 언어를 이용해 사용할 수 있습니다.

일본의 게임회사 DeNA에서 개발하여, 2010년 하반기에 많은 사람들에게 알려졌지만,
여전히 Memcached나 Redis를 MySQL과 같이 사용하고 있다는 점은 안타까운 일입니다.
Handler Socket을 이용할 때의 장점은 크게 세 가지가 있습니다.
첫 번째로 Memcached나 Redis와 같이 DB의 내용을 메모리에 중복하여 유지할 필요가 없습니다.
두 번째로 시간당 처리할 수 있는 쿼리의 갯수가 월등합니다.
세 번째로 자연스럽게 적용해서 기존 SQL 기반 서비스와 같이 사용할 수 있습니다.
접근 권한을 설정할 수 없으며, 메모리 상에 데이터를 모두 적재하지 않으면,
즉 데이터베이스 크기가 시스템의 메모리 크기보다 크면 성능이 급감한다는 점은 단점입니다.
그러나 이러한 제약 사항을 알고 기능을 전략적으로 사용한다면,
기존의 시스템으로도 충분한 효과를 얻을 수 있습니다.


[twitter-jachin24]:        https://twitter.com/jachin24
END

<<'END',
## Coming Soon...

...
END

<<'END',
## Lightning Talk


- <i class="icon-ok"></i> Look at This! Look at That! - [김건호(@yuni_kim)][twitter-yuni_kim]
- <i class="icon-ok"></i> Better than Yesterday - [이종진(@JEEN_LEE)][twitter-jeen_lee]


[twitter-yuni_kim]:         https://twitter.com/yuni_kim
[twitter-jeen_lee]:         https://twitter.com/JEEN_LEE
END

    ],
};
